-----APEX CLASSES-----

//AccountManager
@RestResource(urlMapping='/Accounts/*/contacts')
global with sharing class AccountManager{
    @HttpGet
    global static Account getAccount(){
        RestRequest req = RestContext.request;
        String accId = req.requestURI.substringBetween('Accounts/', '/contacts');
        Account acc = [SELECT Id, Name, (SELECT Id, Name FROM Contacts) 
                       FROM Account WHERE Id = :accId];
 
        return acc;
    }
}
//AccountManagerTest
@IsTest
private class AccountManagerTest{
    @isTest static void testAccountManager(){
        Id recordId = getTestAccountId();
        // Set up a test request
        RestRequest request = new RestRequest();
        request.requestUri =
            'https://ap5.salesforce.com/services/apexrest/Accounts/'+ recordId +'/contacts';
        request.httpMethod = 'GET';
        RestContext.request = request;
 
        // Call the method to test
        Account  acc = AccountManager.getAccount();
 
        // Verify results
        System.assert(acc != null);
    }
 
    private static Id getTestAccountId(){
        Account acc = new Account(Name = 'TestAcc2');
        Insert acc;
 
        Contact con = new Contact(LastName = 'TestCont2', AccountId = acc.Id);
        Insert con;
 
        return acc.Id;
    }
}
//AccountProcessor 
public class AccountProcessor {
 
    //Writting the countContacts method and marking it whit the @future label.
    @future
    public static void countContacts(Set<Id> accountIDs) {
 
        // Creating a list that will contain all those accounts that are referenced through the accounIDs list.
        List<Account> accounts = [SELECT Id, Number_of_Contacts__c, (SELECT id FROM Contacts) from Account where id in :accountIDs];
 
        //Assigment from the total contact number to the Number_of_Contacts__c field for each account at accounts list.
        for( Account account : accounts ) {
          account.Number_of_Contacts__c = account.contacts.size();
        }
 
        //Updating all accounts in list
        update accounts;
 
    }
 
}
//AccountProcessorTest 
@isTest
public class AccountProcessorTest {
 
    @isTest
    public static void countContactsTest(){
        //Creating an account and inserting it
        Account account = New Account(Name = 'Account Number 1');
        insert account;
 
        //Creating some contacts related to the account and inserting them
        List<Contact> contacts = new List<Contact>();
        contacts.add(New Contact(lastname = 'Related Contact 1', AccountId = account.Id));
        contacts.add(New Contact(lastname = 'Related Contact 2', AccountId = account.Id));
        contacts.add(New Contact(lastname = 'Related Contact 3', AccountId = account.Id));
        contacts.add(New Contact(lastname = 'Related Contact 4', AccountId = account.Id));
        insert contacts;
 
        //Creating a List with account Ids to pass them throught the AccountProcessor.countContacts method
        Set<Id> accountIds = new Set<Id>();
        accountIds.add(account.id);
 
        //Starting Test:
        Test.startTest();
 
        //Calling the AccountProcessor.countContacts method
        AccountProcessor.countContacts(accountIds);
 
        //Finishing Test:
        Test.stopTest();
        Account ACC = [SELECT Number_of_Contacts__c FROM Account WHERE id = :account.Id LIMIT 1];
 
        //Setting Assert (We have to parse the account.Number_of_Contacts__c 
        //to integer to avoid some comparasion error between decimal and integer)
        System.assertEquals( Integer.valueOf(ACC.Number_of_Contacts__c) , 4);
    }
 
 
}
//AddPrimaryContact 
public class AddPrimaryContact implements Queueable {
    public contact c;
    public String state;
 
    public AddPrimaryContact(Contact c, String state) {
        this.c = c;
        this.state = state;
    }
 
    public void execute(QueueableContext qc) {
        system.debug('this.c = '+this.c+' this.state = '+this.state);
        List<Account> acc_lst = new List<account>([select id, name, BillingState from account where account.BillingState = :this.state limit 200]);
        List<contact> c_lst = new List<contact>();
        for(account a: acc_lst) {
            contact c = new contact();
            c = this.c.clone(false, false, false, false);
            c.AccountId = a.Id;
            c_lst.add(c);
        }
        insert c_lst;
    }
 
}
//AddPrimaryContactTest 
@IsTest
public class AddPrimaryContactTest {
 
    @IsTest
    public static void testing() {
        List<account> acc_lst = new List<account>();
        for (Integer i=0; i<50;i++) {
            account a = new account(name=string.valueOf(i),billingstate='NY');
            system.debug('account a = '+a);
            acc_lst.add(a);
        }
        for (Integer i=0; i<50;i++) {
            account a = new account(name=string.valueOf(50+i),billingstate='CA');
            system.debug('account a = '+a);
            acc_lst.add(a);
        }      
        insert acc_lst;
        Test.startTest();
        contact c = new contact(lastname='alex');
        AddPrimaryContact apc = new AddPrimaryContact(c,'CA');
        system.debug('apc = '+apc);
        System.enqueueJob(apc);
        Test.stopTest();
        List<contact> c_lst = new List<contact>([select id from contact]);
        Integer size = c_lst.size();
        system.assertEquals(50, size);
    }
 
}
//AnimalLocator 
public class AnimalLocator {
  public class cls_animal {
    public Integer id;  
    public String name;  
    public String eats;  
    public String says;  
  }    
public class JSONOutput{
  public cls_animal animal;
 
     //public JSONOutput parse(String json){
  //return (JSONOutput) System.JSON.deserialize(json, JSONOutput.class);
  //}
}
 
    public static String getAnimalNameById (Integer id) {
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals/' + id);
        //request.setHeader('id', String.valueof(id)); -- cannot be used in this challenge :)
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        system.debug('response: ' + response.getBody());
        //Map<String,Object> map_results = (Map<String,Object>) JSON.deserializeUntyped(response.getBody());
        jsonOutput results = (jsonOutput) JSON.deserialize(response.getBody(), jsonOutput.class);
        //Object results = (Object) map_results.get('animal');
    system.debug('results= ' + results.animal.name);
        return(results.animal.name);
    }
 
}
//AnimalLocatorMock 
@IsTest
global class AnimalLocatorMock implements HttpCalloutMock {
 
    global HTTPresponse respond(HTTPrequest request) {
        Httpresponse response = new Httpresponse();
        response.setStatusCode(200);
        //-- directly output the JSON, instead of creating a logic
        //response.setHeader('key, value)
        //Integer id = Integer.valueof(request.getHeader('id'));
        //Integer id = 1;
        //List<String> lst_body = new List<String> {'majestic badger', 'fluffy bunny'};
        //system.debug('animal return value: ' + lst_body[id]);
        response.setBody('{"animal":{"id":1,"name":"chicken","eats":"chicken food","says":"cluck cluck"}}');
        return response;
    }
 
}
//AnimalLocatorTest
@IsTest
public class AnimalLocatorTest {
    @isTest
    public static void testAnimalLocator() {
        Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock());
        //Httpresponse response = AnimalLocator.getAnimalNameById(1);
        String s =  AnimalLocator.getAnimalNameById(1);
        system.debug('string returned: ' + s);
    }
 
}
 
//AsyncParkService 
//Generated by wsdl2apex
 
public class AsyncParkService {
    public class byCountryResponseFuture extends System.WebServiceCalloutFuture {
        public String[] getValue() {
            ParkService.byCountryResponse response = (ParkService.byCountryResponse)System.WebServiceCallout.endInvoke(this);
            return response.return_x;
        }
    }
    public class AsyncParksImplPort {
        public String endpoint_x = 'https://th-apex-soap-service.herokuapp.com/service/parks';
        public Map<String,String> inputHttpHeaders_x;
        public String clientCertName_x;
        public Integer timeout_x;
        private String[] ns_map_type_info = new String[]{'http://parks.services/', 'ParkService'};
        public AsyncParkService.byCountryResponseFuture beginByCountry(System.Continuation continuation,String arg0) {
            ParkService.byCountry request_x = new ParkService.byCountry();
            request_x.arg0 = arg0;
            return (AsyncParkService.byCountryResponseFuture) System.WebServiceCallout.beginInvoke(
              this,
              request_x,
              AsyncParkService.byCountryResponseFuture.class,
              continuation,
              new String[]{endpoint_x,
              '',
              'http://parks.services/',
              'byCountry',
              'http://parks.services/',
              'byCountryResponse',
              'ParkService.byCountryResponse'}
            );
        }
    }
}
// BotController 
public with sharing class BotController {
 
    class HandlerMapping {
 
        public String handlerClassName;
        public Pattern utterancePattern;
 
        public HandlerMapping(String handlerClassName, String patternStr) {
            this.handlerClassName = handlerClassName;
            this.utterancePattern = Pattern.compile(patternStr);
        }
 
    }
 
    static List<HandlerMapping> handlerMappings;
 
    static {
        List<Bot_Command__c> commands = [SELECT apex_class__c, pattern__c FROM Bot_Command__c WHERE Active__c = True ORDER BY Name];
        System.debug(commands);
        List<HandlerMapping> mappings = new List<HandlerMapping>();
        for (Bot_Command__c command : commands) {
      mappings.add(new HandlerMapping(command.apex_class__c, command.pattern__c));
        }
        handlerMappings = mappings;
    }
 
    @AuraEnabled
    public static BotResponse submit(String utterance, Map<String, String> session, String fileName, String fileContent) {
 
        try {
 
            if (session != null) {
                String nextCommand = session.get('nextCommand');
                if (nextCommand != null) {
                    Type t = Type.forName('', nextCommand);
                    BotHandler h = (BotHandler)t.newInstance();
                    return h.handle(utterance, null, session, fileName, fileContent);
                }
            }
 
            for (HandlerMapping mapping : BotController.handlerMappings) {
                Matcher utteranceMatcher = mapping.utterancePattern.matcher(utterance);
                if (utteranceMatcher.matches()) {
                    Type t = Type.forName('', mapping.handlerClassName);
                    BotHandler h = (BotHandler)t.newInstance();
                    List<String> params = new List<String>();
                    for (Integer i=1; i<=utteranceMatcher.groupCount(); i=i+1) {
                        params.add(utteranceMatcher.group(i).trim());
                    }
                    return h.handle(utterance, params, session, fileName, fileContent);
                }
            }
 
            return new BotResponse(new BotMessage('Bot', 'I don\'t know how to answer that'));
 
        } catch (Exception e) {
            System.debug(e);                
            return new BotResponse(new BotMessage('Bot', 'Oops, something went wrong invoking that command'));
        }
 
    }
 
}
//BotField 
public class BotField {
 
    @AuraEnabled public String name { get;set; }
    @AuraEnabled public String value { get;set; }
    @AuraEnabled public String linkURL { get;set; }
 
    public BotField(String name, String value) {
        this.name = name;
        this.value = value;
    }
 
    public BotField(String name, String value, string linkURL) {
        this.name = name;
        this.value = value;
        this.linkURL = linkURL;
    }
 
}
//BotHandler 
public interface BotHandler {
 
    BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent);
 
}
 
//BotItem 
public class BotItem {
 
    @AuraEnabled public String name { get;set; }
    @AuraEnabled public String linkURL { get;set; }
 
    public BotItem(String name) {
        this.name = name;
    }
 
    public BotItem(String name, string linkURL) {
        this.name = name;
        this.linkURL = linkURL;
    }
 
}
//BotMessage 
public virtual class BotMessage {
 
    @AuraEnabled public String author { get;set; }
    @AuraEnabled public String messageText { get;set; }
    @AuraEnabled public List<BotRecord> records { get;set; }
    @AuraEnabled public List<BotItem> items { get;set; }
    @AuraEnabled public List<BotMessageButton> buttons { get;set; }
    @AuraEnabled public String imageURL { get;set; }
 
    public BotMessage() {
    }
 
    public BotMessage(String author, String messageText) {
        this.author = author;
        this.messageText = messageText;
    }
 
    public BotMessage(String author, String messageText, List<BotRecord> records) {
        this.author = author;
        this.messageText = messageText;
        this.records = records;
    }
 
    public BotMessage(String author, String messageText, List<BotItem> items) {
        this.author = author;
        this.messageText = messageText;
        this.items = items;
    }
 
    public BotMessage(String author, String messageText, List<BotMessageButton> buttons) {
        this.author = author;
        this.messageText = messageText;
        this.buttons = buttons;
    }
 
    public BotMessage(String author, String messageText, String imageURL) {
        this.author = author;
        this.messageText = messageText;
        this.imageURL = imageURL;
    }
 
 
}
//BotMessageButton
public class BotMessageButton {
 
    @AuraEnabled public String label { get;set; }
    @AuraEnabled public String value { get;set; }
 
    public BotMessageButton(String label, String value) {
        this.label = label;
        this.value = value;
    }
 
}
//BotRecord
public class BotRecord {
 
    @AuraEnabled 
    public List<BotField> fields { get;set; }
 
    public BotRecord(List<BotField> fields) {
        this.fields = fields;
    }
 
}
//BotResponse 
public class BotResponse {
 
    @AuraEnabled public List<BotMessage> messages { get; set; }
    @AuraEnabled public Map<String, String> session { get; set; }
 
    public BotResponse() {
    }
 
    public BotResponse(BotMessage[] messages) {
        this.messages = messages;
    }
 
    public BotResponse(List<BotMessage> messages, Map<String, String> session) {
        this.messages = messages;
        this.session = session;
    }
 
    /**
     * Convenience constructor to create a response with a single message
     */
    public BotResponse(BotMessage message) {
        this.messages = new BotMessage[]{message};
    }
 
    /**
     * Convenience constructor to create a response with a single message
     */
    public BotResponse(BotMessage message, Map<String, String> session) {
        this.messages = new BotMessage[]{message};
        this.session = session;
    }
 
}
//BotTest 
@isTest
public class BotTest {
 
    static testMethod void testBotController() {
    Bot_Command__c bc = new Bot_Command__c(Sample_Utterance__c='help lightning', apex_class__c='HandlerHelpTopic', pattern__c='help (.*)');
        insert bc;
        BotResponse response = BotController.submit('help lightning', null, null, null);
        Map<String, String> session = response.session;
        response = BotController.submit('Developer', session, null, null);
        System.assert(response.messages[0].items.size() > 0);
    }
 
    static testMethod void testHello() {
        BotHandler handler = new HandlerHello();
        BotResponse response = handler.handle('', null, null, null, null);
        System.assert(response.messages[0].messageText == 'Hi there!');
    }
 
    static testMethod void testAddTwoNumbers() {
        BotHandler handler = new HandlerAddTwoNumbers();
        BotResponse response = handler.handle('', null, null, null, null);
        Map<String, String> session = response.session;
        response = handler.handle('1', null, session, null, null);
        session = response.session;
        response = handler.handle('2', null, session, null, null);
        System.assert(response.messages[0].messageText == '1 + 2 = 3');
    }
 
    static testMethod void testCostCenter() {
        BotHandler handler = new HandlerCostCenter();
        BotResponse response = handler.handle('', null, null, null, null);
        System.assert(response.messages[0].messageText == 'Your cost center is 21852');
    }
 
    static testMethod void testEmployeeId() {
        BotHandler handler = new HandlerEmployeeId();
        BotResponse response = handler.handle('', null, null, null, null);
        System.assert(response.messages[0].messageText == 'Your employee id is 9854');
    }
 
    static testMethod void testFindAccount() {
    Account a = new Account(Name='TestAccount');
    insert a;
        BotHandler handler = new HandlerFindAccount();
        BotResponse response = handler.handle('', new String[]{'Test'}, null, null, null);
        System.assert(response.messages[0].records.size() == 1);
    }
 
    static testMethod void testFindContact() {
    Contact c = new Contact(LastName='TestContact');
        insert c;
        BotHandler handler = new HandlerFindContact();
        BotResponse response = handler.handle('', new String[]{'Test'}, null, null, null);
        System.assert(response.messages[0].records.size() == 1);
    }
 
  static testMethod void testHelp() {
    Bot_Command__c bc = new Bot_Command__c(Sample_Utterance__c='Hello', apex_class__c='HelloHandler', pattern__c='Hello');
        insert bc;
        BotHandler handler = new HandlerHelp();
        BotResponse response = handler.handle('', null, null, null, null);
        System.assert(response.messages[0].items.size() == 1);
    }
 
  static testMethod void testHelpTopic() {
        BotHandler handler = new HandlerHelpTopic();
        BotResponse response = handler.handle('', null, null, null, null);
        Map<String, String> session = response.session;
    handler.handle('User', null, session, null, null);
 
        response = handler.handle('', null, null, null, null);
        session = response.session;
    response = handler.handle('Admin', null, session, null, null);
 
        response = handler.handle('', null, null, null, null);
        session = response.session;
    response = handler.handle('Developer', null, session, null, null);
 
        System.assert(response.messages[0].items.size() > 0);
    }
 
  static testMethod void testMyOpenCases() {
    Case c = new Case(Subject='TestCase');
    insert c;
        BotHandler handler = new HandlerMyOpenCases();
        BotResponse response = handler.handle('', null, null, null, null);
        System.assert(response.messages[0].records.size() == 1);
    }
 
  static testMethod void testTopOpportunities() {
    Account a = new Account(Name='TestAccount');
    insert a;
    Opportunity o = new Opportunity(Name='TestOpportunity', AccountId=a.id, StageName='Prospecting', CloseDate=System.today().addMonths(1));
    insert o;
        BotHandler handler = new HandlerTopOpportunities();
        BotResponse response = handler.handle('', new String[]{'3'}, null, null, null);
        System.assert(response.messages[0].records.size() == 1);
    }
 
  static testMethod void testTravelApproval() {
        BotHandler handler = new HandlerTravelApproval();
        BotResponse response = handler.handle('', null, null, null, null);
        Map<String, String> session = response.session;
    handler.handle('Boston', null, session, null, null);
    handler.handle('Customer Facing', null, session, null, null);
    handler.handle('02/23/2017', null, session, null, null);
    handler.handle('1000', null, session, null, null);
    handler.handle('1000', null, session, null, null);
        System.assert(response.messages[0].messageText.length() > 0);
    }
 
  static testMethod void testPipeline() {
        BotHandler handler = new HandlerPipeline();
        BotResponse response = handler.handle('', null, null, null, null);
        System.assert(response.messages[0].imageURL != null);
    }
 
  static testMethod void testQuarter() {
        BotHandler handler = new HandlerQuarter();
        BotResponse response = handler.handle('', null, null, null, null);
        System.assert(response.messages[0].imageURL != null);
    }
 
    static testMethod void testNext() {
    Account a = new Account(Name='TestAccount');
    insert a;
    Opportunity o = new Opportunity(Name='TestOpportunity', AccountId=a.id, StageName='Prospecting', CloseDate=System.today().addMonths(1));
    insert o;
    Case c = new Case(Subject='TestCase', Priority='High');
    insert c;
        BotHandler handler = new HandlerNext();
        BotResponse response = handler.handle('', null, null, null, null);
        System.assert(response.messages.size() > 1);
    }
 
    static testMethod void testSOQL() {
    Account a = new Account(Name='TestAccount');
    insert a;
        BotHandler handler = new HandlerSOQL();
        BotResponse response = handler.handle('select id from account', null, null, null, null);
        System.assert(response.messages[0].records.size() == 1);
    }
 
    static testMethod void testFindPropertiesByBedrooms() {
        Property__c p = new Property__c(Name='TestProperty', Beds__c=3, City__c='Boston');
        insert p;
        BotHandler handler = new HandlerFindPropertiesByBedrooms();
        BotResponse response = handler.handle('', new String[]{'3', 'Boston'}, null, null, null);
        System.assert(response.messages[0].records.size() == 1);
    }
 
    static testMethod void testFindProperties() {
        Property__c p = new Property__c(Name='TestProperty', Price__c=450000, City__c='Boston');
        insert p;
        BotHandler handler = new HandlerFindProperties();
        Map<String, String> session = handler.handle('', null, null, null, null).session;
        session = handler.handle('Boston', null, session, null, null).session;
        session = handler.handle('Single Family', null, session, null, null).session;
        session = handler.handle('400000', null, session, null, null).session;
        BotResponse response = handler.handle('500000', null, session, null, null);
        System.assert(response.messages[0].records.size() == 1);
    }
 
}
//DailyLeadProcessor
global class DailyLeadProcessor implements Schedulable{
    global void execute(SchedulableContext ctx){
        List<Lead> leads = [SELECT Id, LeadSource FROM Lead WHERE LeadSource = ''];
 
        if(leads.size() > 0){
            List<Lead> newLeads = new List<Lead>();
 
            for(Lead lead : leads){
                lead.LeadSource = 'DreamForce';
                newLeads.add(lead);
            }
 
            update newLeads;
        }
    }
}
//DailyLeadProcessorTest
@isTest
private class DailyLeadProcessorTest{
    //Seconds Minutes Hours Day_of_month Month Day_of_week optional_year
    public static String CRON_EXP = '0 0 0 2 6 ? 2022';
 
    static testmethod void testScheduledJob(){
        List<Lead> leads = new List<Lead>();
 
        for(Integer i = 0; i < 200; i++){
            Lead lead = new Lead(LastName = 'Test ' + i, LeadSource = '', Company = 'Test Company ' + i, Status = 'Open - Not Contacted');
            leads.add(lead);
        }
 
        insert leads;
 
        Test.startTest();
        // Schedule the test job
        String jobId = System.schedule('Update LeadSource to DreamForce', CRON_EXP, new DailyLeadProcessor());
 
        // Stopping the test will run the job synchronously
        Test.stopTest();
    }
}
//DreamHouseSampleDataController 
global with sharing class DreamHouseSampleDataController {
 
    @RemoteAction
    global static void deleteAll() {
        DELETE [SELECT ID FROM favorite__c];    
        DELETE [SELECT ID FROM property__c];    
        DELETE [SELECT ID FROM broker__c];
        DELETE [SELECT ID FROM bot_command__c];
    }
 
}
//EinsteinVisionController 
global with sharing class EinsteinVisionController {
 
    public static String VISION_API = 'https://api.metamind.io/v1/vision';
  private static final Dreamhouse_Settings__c settings = Dreamhouse_Settings__c.getOrgDefaults();
 
    public class Prediction {
        @AuraEnabled
        public String label {get;set;}
        @AuraEnabled
        public Double probability {get;set;}
    }
 
    // You can upload the 'einstein_platform.pem' into your Salesforce org as 'File' sObject and read it as below
    private static String getAccessToken() {
        if (settings == null || String.isEmpty(settings.Einstein_Vision_Email__c)) {
            throw new AuraHandledException('Cannot create Einstein Vision token: "Einstein Vision Email" not defined in Custom Settings');
        }
        ContentVersion base64Content;
        try {
          base64Content = [SELECT Title, VersionData FROM ContentVersion where Title='einstein_platform' LIMIT 1];
        } catch (Exception e) {
          throw new AuraHandledException('Cannot create Einstein Vision token: einstein_platform.pem file not found');    
        }
        String keyContents = base64Content.VersionData.tostring();
        keyContents = keyContents.replace('-----BEGIN RSA PRIVATE KEY-----', '');
        keyContents = keyContents.replace('-----END RSA PRIVATE KEY-----', '');
        keyContents = keyContents.replace('\n', '');
 
        // Get a new token
        JWT jwt = new JWT('RS256');
        jwt.pkcs8 = keyContents; // Comment this if you are using jwt.cert
        jwt.iss = 'developer.force.com';
        jwt.sub = settings.Einstein_Vision_Email__c;
        jwt.aud = 'https://api.metamind.io/v1/oauth2/token';
        jwt.exp = '3600';
        String access_token;
        if (!Test.isRunningTest()) {
            access_token = JWTBearerFlow.getAccessToken('https://api.metamind.io/v1/oauth2/token', jwt);
        }
        return access_token;    
    }
 
    @AuraEnabled
    public static List<Prediction> predict(String fileName, String content, String modelId) {
        if (String.isBlank(modelId)) {
          return EinsteinVisionController.predictDemo(fileName, content);    
        } else {
      return EinsteinVisionController.predictReal(fileName, content, modelId);            
        }
    }
 
    @AuraEnabled
    public static List<Prediction> predictReal(String fileName, String content, String modelId) {
        String access_token;
        try {
      access_token = EinsteinVisionController.getAccessToken();
        } catch (Exception e) {
      throw new AuraHandledException('Cannot create Einstein Vision token. Did you upload the einstein_platform.pem file and specify the Einstein Vision email address to use in Custom Settings?');      
        }
        List<Prediction> predictions = EinsteinVisionController.predictInternal(content, access_token, modelId, true);
        return predictions;
    }
 
    @AuraEnabled
    public static List<Prediction> predictDemo(String fileName, String content) {
    Integer pos = fileName.indexOf('_');
        String label;
        if (pos > 0) {
            // if the filename is like "victorian_01.jpg", we return "victorian"
          label = fileName.substring(0, pos);    
        } else {
            // else we return a category selected randomly
          List<String> categories = new List<String>{'Victorian', 'Colonial', 'Contemporary'};
          Integer index = Math.mod(Math.round(Math.random()*1000), 3);
          label = categories[index];    
        }
        List<Prediction> predictions = new List<Prediction>();
        Prediction prediction = new Prediction();
        prediction.label = label;    
        prediction.probability = 1;
        predictions.add(prediction);
        return predictions;
    }
 
  @AuraEnabled
    public static String getDatasets() {
        String access_token = EinsteinVisionController.getAccessToken();
        HttpRequest req = new HttpRequest();
        req.setMethod('GET');    
        req.setHeader('Authorization', 'Bearer ' + access_token);
        req.setHeader('Cache-Control', 'no-cache');
        req.setEndpoint(VISION_API + '/datasets');
    try {
          Http http = new Http();
            if (!Test.isRunningTest()) {
              HTTPResponse res = http.send(req);
                return res.getBody();
            } else {
                return '';
            }
        } catch(Exception ex){
            return '{"error": "' + ex.getMessage() + '"}';
        }
    }
 
  @AuraEnabled
    public static String getModelsByDataset(Integer datasetId) {
        String accessToken = EinsteinVisionController.getAccessToken();
        HttpRequest req = new HttpRequest();
        req.setMethod('GET');    
        String endpoint = VISION_API + '/datasets/' + datasetId + '/models';
        req.setEndpoint(endpoint);
        req.setHeader('Authorization', 'Bearer ' + accessToken);
        req.setHeader('Cache-Control', 'no-cache');
    try {
          Http http = new Http();
            if (!Test.isRunningTest()) {
              HTTPResponse res = http.send(req);
        return res.getBody();
            } else {
                return null;
            }
        } catch(Exception ex){
            return '{"error": "' + ex.getMessage() + '"}';
        }
    }
 
    @AuraEnabled
    public static String deleteDataset(Integer datasetId) {
        String accessToken = EinsteinVisionController.getAccessToken();
        String endpoint = VISION_API + '/datasets/' + datasetId;
        HttpRequest req = new HttpRequest();
        req.setMethod('DELETE');    
        req.setEndpoint(endpoint);
        req.setHeader('Authorization', 'Bearer ' + accessToken);
        req.setHeader('Cache-Control', 'no-cache');
    try {
          Http http = new Http();
            if (!Test.isRunningTest()) {
              HTTPResponse res = http.send(req);
        return res.getBody();
            } else {
                return null;
            }
        } catch(Exception ex){
            return '{"error": "' + ex.getMessage() + '"}';
        }
    }
 
    @AuraEnabled
    public static String createDataset(String pathToZip) {
        System.debug(pathToZip);
        String accessToken = EinsteinVisionController.getAccessToken();
        String contentType = HttpFormBuilder.GetContentType();
        String form64 = '';
        form64 += HttpFormBuilder.WriteBoundary();
        form64 += HttpFormBuilder.WriteBodyParameter('path', pathToZip);
        form64 += HttpFormBuilder.WriteBoundary(HttpFormBuilder.EndingType.CrLf);
        Blob formBlob = EncodingUtil.base64Decode(form64);
        String contentLength = string.valueOf(formBlob.size());
        HttpRequest req = new HttpRequest();
        req.setBodyAsBlob(formBlob);
        req.setMethod('POST');    
        req.setEndpoint(VISION_API + '/datasets/upload');
        req.setHeader('Authorization', 'Bearer ' + accessToken);
    req.setHeader('Connection', 'keep-alive');
    req.setHeader('Content-Length', contentLength);
        req.setHeader('Content-Type', contentType);
 
    try {
          Http http = new Http();
            if (!Test.isRunningTest()) {
              HTTPResponse res = http.send(req);
        return res.getBody();
            } else {
                return null;
            }
        } catch(Exception ex){
            return '{"error": "' + ex.getMessage() + '"}';
        }
    }
 
    @AuraEnabled
    public static String trainModel(String modelName, Integer datasetId) {
        String accessToken = EinsteinVisionController.getAccessToken();
        string contentType = HttpFormBuilder.GetContentType();
        string form64 = '';
        form64 += HttpFormBuilder.WriteBoundary();
        form64 += HttpFormBuilder.WriteBodyParameter('name', modelName);
        form64 += HttpFormBuilder.WriteBoundary();
        form64 += HttpFormBuilder.WriteBodyParameter('datasetId', '' + datasetId);
        form64 += HttpFormBuilder.WriteBoundary(HttpFormBuilder.EndingType.CrLf);
        blob formBlob = EncodingUtil.base64Decode(form64);
        string contentLength = string.valueOf(formBlob.size());
        HttpRequest req = new HttpRequest();
    req.setBodyAsBlob(formBlob);
        req.setMethod('POST');    
        req.setEndpoint(VISION_API + '/train');
        req.setHeader('Authorization', 'Bearer ' + accessToken);
    req.setHeader('Connection', 'keep-alive');
    req.setHeader('Content-Length', contentLength);
        req.setHeader('Content-Type', contentType);
    req.setHeader('Cache-Control', 'no-cache');
    req.setTimeout(120000);
 
    try {
          Http http = new Http();
            if (!Test.isRunningTest()) {
              HTTPResponse res = http.send(req);
        return res.getBody();
            } else {
                return null;
            }
        } catch(Exception ex){
            return '{"error": "' + ex.getMessage() + '"}';
        }
    }
 
    private static List<Prediction> predictInternal(String sample, String access_token, String model, boolean isBase64) {
        string contentType = HttpFormBuilder.GetContentType();
        //  Compose the form
        string form64 = '';
 
        form64 += HttpFormBuilder.WriteBoundary();
        form64 += HttpFormBuilder.WriteBodyParameter('modelId', EncodingUtil.urlEncode(model, 'UTF-8'));
        form64 += HttpFormBuilder.WriteBoundary();
        if(isBase64) {
            form64 += HttpFormBuilder.WriteBodyParameter('sampleBase64Content', sample);
        } else {
            form64 += HttpFormBuilder.WriteBodyParameter('sampleLocation', sample);
        }
        form64 += HttpFormBuilder.WriteBoundary(HttpFormBuilder.EndingType.CrLf);
 
        blob formBlob = EncodingUtil.base64Decode(form64);
        string contentLength = string.valueOf(formBlob.size());
        //  Compose the http request
        HttpRequest httpRequest = new HttpRequest();
 
        httpRequest.setBodyAsBlob(formBlob);
        httpRequest.setHeader('Connection', 'keep-alive');
        httpRequest.setHeader('Content-Length', contentLength);
        httpRequest.setHeader('Content-Type', contentType);
        httpRequest.setMethod('POST');
        httpRequest.setTimeout(120000);
        httpRequest.setHeader('Authorization','Bearer ' + access_token);
        httpRequest.setEndpoint(VISION_API + '/predict');
 
        Http http = new Http();
        List<Prediction> predictions = new List<Prediction>();
        if (!Test.isRunningTest()) {
            try {
                HTTPResponse res = http.send(httpRequest);
                if (res.getStatusCode() == 200) {
                    System.JSONParser parser = System.JSON.createParser(res.getBody());
                    while (parser.nextToken() != null) {
                        if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'probabilities')) {
                            parser.nextToken();
                            if (parser.getCurrentToken() == JSONToken.START_ARRAY) {
                                while (parser.nextToken() != null) {
                                    // Advance to the start object marker to
                                    //  find next probability object.
                                    if (parser.getCurrentToken() == JSONToken.START_OBJECT) {
                                        // Read entire probability object
                                        Prediction probability = (Prediction)parser.readValueAs(Prediction.class);
                                        predictions.add(probability);
                                    }
                                }
                            }
                            break;
                        }
                    }
                }
            } catch(System.CalloutException e) {
                System.debug('ERROR:' + e);
            }
        }
        return(predictions);
    }
 
}
//EinsteinVisionControllerTest
@isTest
public class EinsteinVisionControllerTest {
 
    static testMethod void testPredict() {
        insert new Dreamhouse_Settings__c(Einstein_Vision_Email__c = 'user@host.com');
        Boolean success = true;
        try {
            ContentVersion cv = new ContentVersion(Title='einstein_platform', PathOnClient='/', VersionData=Blob.valueof('some key'));
            insert cv;
          EinsteinVisionController.predict('victorian.jpg', '', 'theModelId');
          EinsteinVisionController.predict('victorian_01.jpg', '', '');
        } catch (Exception e) {
            success = false;
        } finally {
          System.assert(success);
        }
    }
 
    static testMethod void testGetDataSets() {
        insert new Dreamhouse_Settings__c(Einstein_Vision_Email__c = 'user@host.com');
        Boolean success = true;
        try {
            ContentVersion cv = new ContentVersion(Title='einstein_platform', PathOnClient='/', VersionData=Blob.valueof('some key'));
            insert cv;
          EinsteinVisionController.getDataSets();
        } catch (Exception e) {
            System.debug(e);
            success = false;
        } finally {
          System.assert(success);
        }
    }
 
    static testMethod void testGetModelByDataset() {
        insert new Dreamhouse_Settings__c(Einstein_Vision_Email__c = 'user@host.com');
        Boolean success = true;
        try {
            ContentVersion cv = new ContentVersion(Title='einstein_platform', PathOnClient='/', VersionData=Blob.valueof('some key'));
            insert cv;
          EinsteinVisionController.getModelsByDataset(101);
        } catch (Exception e) {
            success = false;
        } finally {
          System.assert(success);
        }
    }
 
    static testMethod void testDeleteDataset() {
        insert new Dreamhouse_Settings__c(Einstein_Vision_Email__c = 'user@host.com');
        Boolean success = true;
        try {
            ContentVersion cv = new ContentVersion(Title='einstein_platform', PathOnClient='/', VersionData=Blob.valueof('some key'));
            insert cv;
            EinsteinVisionController.deleteDataset(101);
        } catch (Exception e) {
            success = false;
        } finally {
          System.assert(success);
        }
    }
 
    static testMethod void testCreateDataset() {
        insert new Dreamhouse_Settings__c(Einstein_Vision_Email__c = 'user@host.com');
        Boolean success = true;
        try {
            ContentVersion cv = new ContentVersion(Title='einstein_platform', PathOnClient='/', VersionData=Blob.valueof('some key'));
            insert cv;
          EinsteinVisionController.createDataset('path/to/zip');
        } catch (Exception e) {
            success = false;
        } finally {
          System.assert(success);
        }
    }
 
    static testMethod void testTrainModel() {
        insert new Dreamhouse_Settings__c(Einstein_Vision_Email__c = 'user@host.com');
        Boolean success = true;
        try {
            ContentVersion cv = new ContentVersion(Title='einstein_platform', PathOnClient='/', VersionData=Blob.valueof('some key'));
            insert cv;
          EinsteinVisionController.trainModel('theModelId', 101);
        } catch (Exception e) {
            success = false;
        } finally {
          System.assert(success);
        }
    }
 
    static testMethod void JTWIssue() {
        Boolean success = true;
        try {
            JWT jwt = new JWT('RS256');
            jwt.pkcs8 = 'some key';
            jwt.iss = 'developer.force.com';
            jwt.sub = 'user@server.com';
            jwt.aud = 'https://api.metamind.io/v1/oauth2/token';
            jwt.exp = '3600';
            try {
                String token = jwt.issue();    
            } catch (Exception e1) {
 
            }
        } catch (Exception e2) {
            success = false;
        } finally {
            System.assert(success);
        }
    }
 
}
//HandlerAddTwoNumbers
public with sharing class HandlerAddTwoNumbers implements BotHandler {
 
    public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent) {
        if (session == null) {
            session = new Map<String, String>();
            session.put('nextCommand', 'HandlerAddTwoNumbers');
            session.put('step', 'askFirstNumber');
            return new BotResponse(new BotMessage('Bot', 'What\'s the first number?'), session);
        }
        String step = session.get('step');
        if (step == 'askFirstNumber') {
            session.put('firstNumber', utterance);
            session.put('nextCommand', 'HandlerAddTwoNumbers');
            session.put('step', 'askSecondNumber');
            return new BotResponse(new BotMessage('Bot', 'What\'s the second number?'), session);
        } else {
      Integer firstNumber = Integer.valueof(session.get('firstNumber'));
          Integer secondNumber = Integer.valueof(utterance);
          Integer total = firstNumber + secondNumber;
          BotMessage message = new BotMessage('Bot', '' + firstNumber + ' + ' + secondNumber + ' = ' + total);
          return new BotResponse(message);
        }
 
    }
 
}
